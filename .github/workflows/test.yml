name: Test

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v2
      - name: Ubuntu cache
        uses: actions/cache@v1
        if: startsWith(matrix.os, 'ubuntu')
        with:
          path: ~/.cache/pip
          key:
            ${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.python-version }}-

      - name: Ubuntu Poetry cache
        uses: actions/cache@v2
        if: startsWith(matrix.os, 'ubuntu')
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: poetry-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            poetry-${{ matrix.os }}-${{ matrix.python-version }}

      - name: macOS cache
        uses: actions/cache@v1
        if: startsWith(matrix.os, 'macOS')
        with:
          path: ~/Library/Caches/pip
          key:
            ${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.python-version }}-

      - name: Windows cache
        uses: actions/cache@v1
        if: startsWith(matrix.os, 'windows')
        with:
          path: c:\users\runneradmin\appdata\local\pip\cache
          key:
            ${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.python-version }}-

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade poetry
          python -m pip install hidapi
          python -m pip install python-xlib
          poetry install

      # This works on Ubuntu, it has not been tested on MacOS or Windows
      - name: Test
        uses: GabrielBB/xvfb-action@v1
        with:
          run: bash -c "poetry run pytest tests/ -s --cov=streamdeck_ui/ --cov-report=term-missing ${@-}"
      
      - name: Generate Coverage Report
        run: poetry run coverage xml

      - name: Report Coverage
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.8'
        uses: codecov/codecov-action@v1
        with:
          files: ./coverage.xml
